name: CI

on:
  workflow_dispatch:
    push:
     branch:
       - focal
    releases:
      - v*.*.*

jobs:

  check:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Shellcheck
        run: |
          shellcheck --version
          if [[ -d ./root ]]; then
            find "./root" -type f -print -exec shellcheck {} \;
          else
            true
          fi

  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        architecture:  [linux-arm-v7, linux-arm64, linux-amd64]
    needs: [check]
    outputs:
      version: '${{ steps.prep.outputs.version }}'
      branch: '${{ steps.prep.outputs.branch }}'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Git branch name
        id: git-branch-name
        uses: EthanSK/git-branch-name-action@v1

      - name: Echo the branch name
        run: echo "Branch name ${BRANCH_NAME}"

      - name: Check if architecture exists
        id: arch_check
        run: |
          (test -f Dockerfile.${{ matrix.architecture }} && echo ::set-output
          name=check::passed) || echo ::set-output name=check::failed

      - name: Set up QEMU
        if: 'contains(steps.arch_check.outputs.check, ''passed'')'
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        if: 'contains(steps.arch_check.outputs.check, ''passed'')'
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          version: latest
          driver-opts: 'image=moby/buildkit:master'

      - name: Login to DockerHub
        if: 'contains(steps.arch_check.outputs.check, ''passed'')'
        uses: docker/login-action@v1
        with:
          username: '${{ secrets.DOCKERHUB_USERNAME }}'
          password: '${{ secrets.DOCKERHUB_TOKEN }}'

      - name: Login to GitHub Container Registry
        if: 'contains(steps.arch_check.outputs.check, ''passed'')'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: '${{ github.repository_owner }}'
          password: '${{ secrets.GITHUB_TOKEN }}'

      - name: Prepare
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        id: prep
        run: |
          ARCHITECTURE=${{ matrix.architecture }}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=title::${GITHUB_REPOSITORY}:${GITHUB_REF//refs\/heads\//}
          echo ::set-output name=revision::${GITHUB_SHA}
          echo ::set-output name=source::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/${GITHUB_REF//refs\/heads\//}
          echo ::set-output name=vendor::${{ github.repository_owner }}
          echo ::set-output name=url::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/master/README.md
          echo ::set-output name=platform::${ARCHITECTURE//-/\/}
          echo ::set-output name=cache::${GITHUB_REPOSITORY}:${GITHUB_REF//refs\/heads\//}-cache-${{ matrix.architecture }}
          echo ::set-output name=tag::${GITHUB_REPOSITORY}:${GITHUB_REF//refs\/heads\//}-${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}-${{ matrix.architecture }}
          VERSION=$(jq -r '.version // empty' < VERSION.json)
          if [[ -z ${VERSION} ]]; then
            VERSION=$(date +"%Y%m%d%H%M%S")
          fi
          echo ::set-output name=version::${VERSION}
          BRANCH=${{ steps.git-branch-name.outputs }}
          ARGS="$(jq -r 'to_entries[] | [(.key | ascii_upcase),.value] | join("=")' < VERSION.json)"
          ARGS="${ARGS//'%'/'%25'}"
          ARGS="${ARGS//$'\n'/'%0A'}"
          ARGS="${ARGS//$'\r'/'%0D'}"
          echo "::set-output name=build-args::${ARGS}"
          echo "::set-output name=package-version::${GITHUB_REF//refs\/heads\//}-${GITHUB_SHA:0:7}"
          
      - name: Build and push
        if: 'contains(steps.arch_check.outputs.check, ''passed'')'
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: '${{ steps.prep.outputs.platform }}'
          file: './Dockerfile.${{ matrix.architecture }}'
          cache-from: 'ghcr.io/${{ steps.prep.outputs.cache }}'
          cache-to: 'ghcr.io/${{ steps.prep.outputs.cache }}'
          tags: |
            ${{ steps.prep.outputs.tag }}
            ghcr.io/${{ steps.prep.outputs.tag }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.title=${{ steps.prep.outputs.title }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.revision }}
            org.opencontainers.image.source=${{ steps.prep.outputs.source }}
            org.opencontainers.image.vendor=${{ steps.prep.outputs.vendor }}
            org.opencontainers.image.url=${{ steps.prep.outputs.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
            BUILD_ARCHITECTURE=${{ matrix.architecture }}
            PACKAGE_VERSION=${{ steps.prep.outputs.package-version }}
            ${{ steps.prep.outputs.build-args }}
      - name: Dive Analysis
        if: 'contains(steps.arch_check.outputs.check, ''passed'')'
        uses: yuichielectric/dive-action@0.0.4
        with:
          image: 'ghcr.io/${{ steps.prep.outputs.tag }}'
      - name: Run tests
        if: 'contains(steps.arch_check.outputs.check, ''passed'')'
        run: |
          bash update.sh tests ghcr.io/${{ steps.prep.outputs.tag }}

  publish:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        registry:
          - docker.io
          - ghcr.io
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub
        if: matrix.registry == 'docker.io'
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: '${{ secrets.DOCKERHUB_USERNAME }}'
          password: '${{ secrets.DOCKERHUB_TOKEN }}'

      - name: Login to GitHub Container Registry
        if: matrix.registry == 'ghcr.io'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: '${{ github.repository_owner }}'
          password: '${{ secrets.GITHUB_TOKEN }}'

      - name: Create manifests
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          IMAGE=${{ matrix.registry }}/${{ github.repository_owner }}/baseimage-ubuntu
          TAG=${GITHUB_REF//refs\/heads\//}
          SOURCE=${IMAGE}:${TAG}-${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}
          VERSION=${{ needs.build.outputs.version }}
          BRANCH=${{ needs.build.outputs.branch }}
          [[ -f Dockerfile.linux-amd64 ]]  && AMD64=${SOURCE}-linux-amd64
          [[ -f Dockerfile.linux-arm64 ]]  && ARM64=${SOURCE}-linux-arm64
          [[ -f Dockerfile.linux-arm-v7 ]] && ARMV7=${SOURCE}-linux-arm-v7
          docker manifest create ${IMAGE}:${TAG}${BRANCH} ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push   ${IMAGE}:${TAG}${BRANCH}
          docker manifest create ${IMAGE}:${TAG}${BRANCH}-${VERSION//\~/-} ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push   ${IMAGE}:${TAG}${BRANCH}-${VERSION//\~/-}
          docker manifest create ${IMAGE}:${TAG}-${GITHUB_SHA:0:7} ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push   ${IMAGE}:${TAG}-${GITHUB_SHA:0:7}
          if [[ ${TAG} == release ]]; then
            docker manifest create ${IMAGE}:latest ${AMD64} ${ARM64} ${ARMV7}
            docker manifest push   ${IMAGE}:latest
          fi

  tags:
    runs-on: ubuntu-20.04
    needs:
      - build
      - publish
    steps:
      - name: Update tags.json
        env:
          GITHUB_OWNER: '${{ github.repository_owner }}'
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          VERSION: '${{ needs.build.outputs.version }}'
        shell: bash
        run: |
          git config --global user.email
          "${GITHUB_OWNER}@users.noreply.github.com"

          git config --global user.name "${GITHUB_OWNER}"

          git clone -b "master" "https://${{ secrets.GITHUB_TOKEN
          }}@github.com/${GITHUB_REPOSITORY}.git" ${GITHUB_WORKSPACE}/master

          cd ${GITHUB_WORKSPACE}/master || exit 1

          ls -lah

          if [[ -f ./tags.json ]]; then
            json=$(cat ./tags.json)
            jq '(.tags[] | select(.name == "'"${GITHUB_REF//refs\/heads\//}"'") | .version) |= "'"${VERSION//\~/-}"'"' <<< "${json}" > ./tags.json
            json=$(cat ./tags.json)
            jq '(.tags[] | select(.name == "'"${GITHUB_REF//refs\/heads\//}"'") | .lastUpdated) |= "'"$(date -u +'%FT%T.%3NZ')"'"' <<< "${json}" > ./tags.json
            json=$(cat ./tags.json)
            jq '(.tags[] | select(.name == "'"${GITHUB_REF//refs\/heads\//}"'") | .commit) |= "'"${GITHUB_SHA:0:7}"'"' <<< "${json}" > ./tags.json
            git add .
            if git commit -m ":${GITHUB_REF//refs\/heads\//} => [${VERSION//\~/-}, ${GITHUB_SHA:0:7}]"; then
              git push
            fi
          fi
